# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from entities import funnel_pb2 as entities_dot_funnel__pb2
from services import event_collector_pb2 as services_dot_event__collector__pb2


class EventCollectorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.TrackFunnelEvent = channel.unary_unary(
        '/collector.EventCollector/TrackFunnelEvent',
        request_serializer=entities_dot_funnel__pb2.FunnelEvent.SerializeToString,
        response_deserializer=services_dot_event__collector__pb2.Response.FromString,
        )


class EventCollectorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def TrackFunnelEvent(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EventCollectorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'TrackFunnelEvent': grpc.unary_unary_rpc_method_handler(
          servicer.TrackFunnelEvent,
          request_deserializer=entities_dot_funnel__pb2.FunnelEvent.FromString,
          response_serializer=services_dot_event__collector__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'collector.EventCollector', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
