# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from entities import visit_pb2 as entities_dot_visit__pb2
from services import events_collector_pb2 as services_dot_events__collector__pb2


class EventsCollectorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.TrackVisit = channel.unary_unary(
        '/collector.EventsCollector/TrackVisit',
        request_serializer=entities_dot_visit__pb2.Visit.SerializeToString,
        response_deserializer=services_dot_events__collector__pb2.Response.FromString,
        )


class EventsCollectorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def TrackVisit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EventsCollectorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'TrackVisit': grpc.unary_unary_rpc_method_handler(
          servicer.TrackVisit,
          request_deserializer=entities_dot_visit__pb2.Visit.FromString,
          response_serializer=services_dot_events__collector__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'collector.EventsCollector', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
